const ethers = require("ethers");
const fs = require("fs-extra");
require("dotenv").config();

//ganache server http://127.0.0.1:7545
async function main() {
  const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);

  //  let wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
  const encryptedJson = fs.readFileSync("./encryptedKey.json", "utf8");
  let wallet = new ethers.Wallet.fromEncryptedJsonSync(
    encryptedJson,
    process.env.PASSWORD //password
  );
  wallet = await wallet.connect(provider);
  const abi = fs.readFileSync(
    "./_contracts_SimpleStorage_sol_SimpleStorage.abi",
    "utf8"
  );

  const bin = fs.readFileSync(
    "_contracts_SimpleStorage_sol_SimpleStorage.bin",
    "utf8"
  );

  const contractFactory = new ethers.ContractFactory(abi, bin, wallet);

  const overrides = {
    gasLimit: 6721975, // Adjust the gas limit as needed
    gasPrice: ethers.utils.parseUnits("20000000000", "wei"), // Adjust the gas price as needed
  };

  console.log("Deploying, please wait...");
  const contract = await contractFactory.deploy(overrides);
  await contract.deployTransaction.wait(1);
  const txStoreRes = await contract.store("7");
  txStoreReceipt = await txStoreRes.wait(1);
  console.log(txStoreReceipt);
  const favNumber = await contract.retreive();
  console.log(favNumber.toString());
  // const deploymentReceipt = await contract.deployTransaction.wait(1);

  //the deployementreceipt is the result when we have 1 block confirmation
  //the contract transaction is the the result at the end of the transaction
  // console.log("Here is the transaction receipt");
  // console.log(contract.deployTransaction);
  // console.log("here is the deployement receipt");
  // console.log(deploymentReceipt);

  // const tx = {
  //   nonce: 7,
  //   gasPrice: 20000000000,
  //   gasLimit: 6721975,
  //   to: null,
  //   value: 0,
  //   data: "0x60806040526040518060400160405280600181526020016040518060400160405280600781526020017f5061747269636b0000000000000000000000000000000000000000000000000081525081525060015f820151815f01556020820151816001019081620000709190620002ea565b5050503480156200007f575f80fd5b50620003ce565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200010257607f821691505b602082108103620001185762000117620000bd565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026200017c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200013f565b6200018886836200013f565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f620001d2620001cc620001c684620001a0565b620001a9565b620001a0565b9050919050565b5f819050919050565b620001ed83620001b2565b62000205620001fc82620001d9565b8484546200014b565b825550505050565b5f90565b6200021b6200020d565b62000228818484620001e2565b505050565b5b818110156200024f57620002435f8262000211565b6001810190506200022e565b5050565b601f8211156200029e5762000268816200011e565b620002738462000130565b8101602085101562000283578190505b6200029b620002928562000130565b8301826200022d565b50505b505050565b5f82821c905092915050565b5f620002c05f1984600802620002a3565b1980831691505092915050565b5f620002da8383620002af565b9150826002028217905092915050565b620002f58262000086565b67ffffffffffffffff81111562000311576200031062000090565b5b6200031d8254620000ea565b6200032a82828562000253565b5f60209050601f83116001811462000360575f84156200034b578287015190505b620003578582620002cd565b865550620003c6565b601f19841662000370866200011e565b5f5b82811015620003995784890151825560018201915060208501945060208101905062000372565b86831015620003b95784890151620003b5601f891682620002af565b8355505b6001600288020188555050505b505050505050565b6109b380620003dc5f395ff3fe608060405234801561000f575f80fd5b5060043610610060575f3560e01c80636057361d146100645780636f760f411461008057806377ec2b551461009c5780638bab8dd5146100bb5780639e7a13ad146100eb578063b05784b81461011c575b5f80fd5b61007e6004803603810190610079919061038c565b61013a565b005b61009a600480360381019061009591906104f3565b610143565b005b6100a46101c7565b6040516100b29291906105d6565b60405180910390f35b6100d560048036038101906100d09190610604565b61025e565b6040516100e2919061064b565b60405180910390f35b6101056004803603810190610100919061038c565b61028b565b6040516101139291906105d6565b60405180910390f35b610124610340565b604051610131919061064b565b60405180910390f35b805f8190555050565b6003604051806040016040528083815260200184815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f0155602082015181600101908161019d919061085e565b505050806004836040516101b19190610967565b9081526020016040518091039020819055505050565b6001805f0154908060010180546101dd90610691565b80601f016020809104026020016040519081016040528092919081815260200182805461020990610691565b80156102545780601f1061022b57610100808354040283529160200191610254565b820191905f5260205f20905b81548152906001019060200180831161023757829003601f168201915b5050505050905082565b6004818051602081018201805184825260208301602085012081835280955050505050505f915090505481565b6003818154811061029a575f80fd5b905f5260205f2090600202015f91509050805f0154908060010180546102bf90610691565b80601f01602080910402602001604051908101604052809291908181526020018280546102eb90610691565b80156103365780601f1061030d57610100808354040283529160200191610336565b820191905f5260205f20905b81548152906001019060200180831161031957829003601f168201915b5050505050905082565b5f8054905090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b61036b81610359565b8114610375575f80fd5b50565b5f8135905061038681610362565b92915050565b5f602082840312156103a1576103a0610351565b5b5f6103ae84828501610378565b91505092915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610405826103bf565b810181811067ffffffffffffffff82111715610424576104236103cf565b5b80604052505050565b5f610436610348565b905061044282826103fc565b919050565b5f67ffffffffffffffff821115610461576104606103cf565b5b61046a826103bf565b9050602081019050919050565b828183375f83830152505050565b5f61049761049284610447565b61042d565b9050828152602081018484840111156104b3576104b26103bb565b5b6104be848285610477565b509392505050565b5f82601f8301126104da576104d96103b7565b5b81356104ea848260208601610485565b91505092915050565b5f806040838503121561050957610508610351565b5b5f83013567ffffffffffffffff81111561052657610525610355565b5b610532858286016104c6565b925050602061054385828601610378565b9150509250929050565b61055681610359565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610593578082015181840152602081019050610578565b5f8484015250505050565b5f6105a88261055c565b6105b28185610566565b93506105c2818560208601610576565b6105cb816103bf565b840191505092915050565b5f6040820190506105e95f83018561054d565b81810360208301526105fb818461059e565b90509392505050565b5f6020828403121561061957610618610351565b5b5f82013567ffffffffffffffff81111561063657610635610355565b5b610642848285016104c6565b91505092915050565b5f60208201905061065e5f83018461054d565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806106a857607f821691505b6020821081036106bb576106ba610664565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261071d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826106e2565b61072786836106e2565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61076261075d61075884610359565b61073f565b610359565b9050919050565b5f819050919050565b61077b83610748565b61078f61078782610769565b8484546106ee565b825550505050565b5f90565b6107a3610797565b6107ae818484610772565b505050565b5b818110156107d1576107c65f8261079b565b6001810190506107b4565b5050565b601f821115610816576107e7816106c1565b6107f0846106d3565b810160208510156107ff578190505b61081361080b856106d3565b8301826107b3565b50505b505050565b5f82821c905092915050565b5f6108365f198460080261081b565b1980831691505092915050565b5f61084e8383610827565b9150826002028217905092915050565b6108678261055c565b67ffffffffffffffff8111156108805761087f6103cf565b5b61088a8254610691565b6108958282856107d5565b5f60209050601f8311600181146108c6575f84156108b4578287015190505b6108be8582610843565b865550610925565b601f1984166108d4866106c1565b5f5b828110156108fb578489015182556001820191506020850194506020810190506108d6565b868310156109185784890151610914601f891682610827565b8355505b6001600288020188555050505b505050505050565b5f81905092915050565b5f6109418261055c565b61094b818561092d565b935061095b818560208601610576565b80840191505092915050565b5f6109728284610937565b91508190509291505056fea264697066735822122038e7c42be48a91ffa9eea8c3b21746740df50a33c4d8a2a27aa8ae556100e3e164736f6c63430008150033",
  //   chainId: 1337,
  // };
  // const sentTxResponse = await wallet.sendTransaction(tx);
  // const txReceipt = await sentTxResponse.wait(1);
  // console.log("this is the sent tx");
  // console.log(sentTxResponse);

  // console.log("this is tx receipt after 1 block conformation");
  // console.log(txReceipt);
  // txCout = await wallet.getTransactionCount();
  // console.log(txCout);
  // const network = await provider.getNetwork();
  // console.log(network);
}

main()
  .then(() => {
    console.log("compiled");
    process.exit(0);
  })
  .catch((error) => {
    console.log(error);
  });
